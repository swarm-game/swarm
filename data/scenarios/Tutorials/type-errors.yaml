version: 1
name: Type errors
description: |
  Learn how to discover type errors.
objectives:
  - goal:
      - |
        Let's see what happens when you enter something that does not type check.
        Try typing `turn 1`{=snippet} at the REPL prompt.  Clearly this is nonsense, and
        part of the expression will be highlighted in red.  To see what the error is, hit **Enter**.
        The REPL will print out a type error.
      - "Some other type errors for you to try:"
      - |
        `turn move`{=snippet}
      - |
        `place tree`{=snippet} (without double quotes around `tree`{=snippet})
      - |
        `move move`{=snippet}
      - The last expression might give the most confusing error. Obviously we are just missing a `;`{=snippet} separating the two `move` commands.  However, without the semicolon, it looks like `move` is a function being applied to an argument, but of course `move` is not a function.
      - Once you are done experimenting, execute `place "Win"` to finish this challenge and move on to the next.
    condition: |
      try {
        w <- as base {has "Win"};
        pure (not w);
      } { pure false }
entities:
  - name: Win
    display:
      attr: device
      char: 'W'
    description:
      - Do `place "Win"` once you are done with this challenge.
    properties: [known, pickable]
solution: |
  place "Win"
robots:
  - name: base
    dir: east
    devices:
      - treads
      - compass
      - logger
      - grabber
    inventory:
      - [1, Win]
world:
  palette:
    '>': [grass, null, base]
    '.': [grass]
    '┌': [stone, upper left corner]
    '┐': [stone, upper right corner]
    '└': [stone, lower left corner]
    '┘': [stone, lower right corner]
    '─': [stone, horizontal wall]
    '│': [stone, vertical wall]
  upperleft: [-1, 1]
  map: |
    ┌───┐
    │>..│
    │...│
    └───┘
